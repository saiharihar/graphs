class Solution {
public:
    vector<vector<string>> ans; // To store all the shortest transformation sequences

    // Depth-First Search to explore all paths from beginWord to endWord
    void dfs(string &beginWord, string &endWord, vector<string>& path, unordered_map<string, unordered_set<string>>& adj) {
        path.push_back(beginWord); // Add the current word to the path
        if (beginWord == endWord) { // If the endWord is reached, add the current path to the result
            ans.push_back(path);
            path.pop_back(); // Remove the last word before returning
            return;
        }
        // Recursively visit all adjacent words
        for (auto x : adj[beginWord]) {
            dfs(x, endWord, path, adj);
        }
        path.pop_back(); // Remove the last word before returning
    }

    // Method to find all shortest transformation sequences
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_map<string, unordered_set<string>> adj; // Adjacency list
        unordered_set<string> dict(wordList.begin(), wordList.end()); // Dictionary of words
        queue<string> q; // Queue for BFS
        q.push(beginWord); // Initialize BFS with beginWord
        unordered_map<string, int> vis; // To store the level (distance from beginWord)
        vis[beginWord] = 0;

        // BFS to build the adjacency list
        while (!q.empty()) {
            string curr = q.front();
            q.pop();
            string temp = curr;
            for (int i = 0; i < curr.size(); i++) {
                char originalChar = temp[i];
                for (char c = 'a'; c <= 'z'; c++) {
                    if (originalChar == c) { // Skip if the character is the same
                        continue;
                    }
                    temp[i] = c; // Change the character
                    if (dict.count(temp) > 0) { // If the transformed word is in the dictionary
                        if (vis.count(temp) == 0) { // If not visited yet
                            vis[temp] = vis[curr] + 1;
                            q.push(temp); // Add to BFS queue
                            adj[curr].insert(temp); // Build adjacency list
                        } else if (vis[temp] == vis[curr] + 1) {
                            adj[curr].insert(temp); // If it is at the next level, add to adjacency list
                        }
                    }
                }
                temp[i] = originalChar; // Restore the original character
            }
        }

        vector<string> path; // To store the current path
        dfs(beginWord, endWord, path, adj); // Start DFS to find all paths
        return ans; // Return the result
    }
};
