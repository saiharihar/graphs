class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string>dict;
        bool ispresent=false;
        for(auto word:wordList){
            if(endWord.compare(word)==0)
                ispresent=true;
            dict.insert(word);
        }
        if(ispresent==false)
            return 0;


        int depth=0;
        queue<string>q;
        q.push(beginWord);
        while(!q.empty()){
            depth+=1;
            int l=q.size();
            while(l--){
                 string curr=q.front();
                 q.pop();
                for(int i=0;i<curr.length();i++){
                    string temp=curr;
                    for(char c='a';c<='z';c++){
                        temp[i]=c;
                        if(temp.compare(endWord)==0){
                            return depth+1;
                        }
                        if(temp.compare(curr)==0){
                            continue;
                        }
                        if(dict.find(temp)!=dict.end()){
                            q.push(temp);
                            dict.erase(temp);
                        }
                    }
                }
            }

        }
        return 0;
    }
};