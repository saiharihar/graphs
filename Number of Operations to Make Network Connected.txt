class Solution {
public:

    void dfs(int u,vector<bool>&vis,unordered_map<int,vector<int>>&adj){
        vis[u]=true;
        for(auto i:adj[u]){
            if(!vis[i]){
                dfs(i,vis,adj);
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        unordered_map<int,vector<int>>adj;
        int e=0;
        for(int i=0;i<connections.size();i++){
            adj[connections[i][0]].push_back(connections[i][1]);
            adj[connections[i][1]].push_back(connections[i][0]);
            e+=1;
        }
        int comp=0;
        vector<bool>vis(n,false);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                comp+=1;
                dfs(i,vis,adj);
            }
        }
        if(e<n-1){
            return -1;
        }
        int re=e-((n-1)-(comp-1));
        if(re>=comp-1){
            return comp-1;
        }
        return -1;
    }
};