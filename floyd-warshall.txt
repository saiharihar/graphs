#include<bits/stdc++.h>
using namespace std;

int v, e;

void floyd_warshall(vector<vector<int>>& adj) {
    vector<vector<int>> dist(v, vector<int>(v, INT_MAX));

    for (int i = 0; i < v; i++) {
        for (int j = 0; j < v; j++) {
            if (i == j) dist[i][j] = 0; 
            else if (adj[i][j] != 0) dist[i][j] = adj[i][j]; 
        }
    }

    for (int k = 0; k < v; k++) {
        for (int i = 0; i < v; i++) {
            for (int j = 0; j < v; j++) {
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX) {
                    if (dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }
    }
    for (int i = 0; i < v; i++) {
        if (dist[i][i] < 0) {
            cout << "Graph contains negative weight cycle" << endl;
            return;
        }
    }
    for (int i = 0; i < v; i++) {
        for (int j = 0; j < v; j++) {
            if (dist[i][j] == INT_MAX) {
                cout << "INF ";
            } else {
                cout << dist[i][j] << " ";
            }
        }
        cout << endl;
    }
}

int main() {
    cout << "Enter number of vertices" << endl;
    cin >> v;

    vector<vector<int>> adj(v, vector<int>(v, 0));

    cout << "Enter adjacency matrix (use 0 for no edge)" << endl;
    for (int i = 0; i < v; i++) {
        for (int j = 0; j < v; j++) {
            cin >> adj[i][j];
        }
    }

    floyd_warshall(adj);

    return 0;
}
