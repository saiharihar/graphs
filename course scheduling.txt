class Solution {
public:
    bool solve(int node,vector<vector<int>>&adj,vector<int>&visited){
        if(visited[node]==2){
            return true;
        }
        visited[node]=2;
        for(int i=0;i<adj[node].size();i++){
            if(visited[adj[node][i]]!=1){
                if(solve(adj[node][i],adj,visited)){
                    return true;
                }
            }
        }
        visited[node]=1;
        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout.tie(NULL);
        vector<vector<int>>adj(numCourses);
        for(int i=0;i<prerequisites.size();i++){
            adj[prerequisites[i][0]].push_back(prerequisites[i][1]);
        }
        vector<int>visited(numCourses,0);
        for(int i=0;i<numCourses;i++){
            if(visited[i]==0){
                if(solve(i,adj,visited)){
                    return false;
                }
            }
        }
        return true;
    }
};