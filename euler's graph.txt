#include<bits/stdc++.h>
using namespace std;
int v,e;
unordered_map<int,vector<int>>adj;

void dfs(int node,vector<bool>&vis){
    vis[node]=true;
    for(int i:adj[node]){
        if(!vis[i]){
            dfs(i,vis);
        }
    }
}

bool connected_graph(){
    vector<bool>vis(v,false);
    int node=-1;
    for(int i=0;i<v;i++){
        if(adj[i].size()>0){
            node=i;
            break;
        }
    }
    if(node==-1){
        return true;
    }
    dfs(node,vis);
    
    for(int i=0;i<v;i++){
        if(vis[i]==false && adj[i].size()>0){
            return false;
        }
    }
    return true;
}

int solve(){
    if(!connected_graph()){
        return 0;
    }
    int odd=0;
    for(int i=0;i<v;i++){
        if(adj[i].size()%2!=0){
            odd++;
        }
    }
    if(odd>2){
        return 0;
    }
    return (odd==0)?2:1;
}


void eulers(){
    int res=solve();
    if(res==0){
        cout<<"graph is not an euler circuit"<<endl;
    }
    else if(res==1){
        cout<<"graph is semi euler circuit"<<endl;
    }
    else{
        cout<<"graph is an euler circuit"<<endl;
    }
}

int main(){
    cout<<" enter no of vertices and edges"<<endl;
    cin>>v>>e;
    cout<<"enter the edges"<<endl;
    for(int i=0;i<e;i++){
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    eulers();
}