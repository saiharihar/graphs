#include<iostream>
#include<vector>
#include<queue>
using namespace std;
vector<int>topologicalSort(vector<vector<int>>&adj,int n){
    vector<int>indegree(n,0);
    for(int i=0;i<n;i++){
        for(int j=0;j<adj[i].size();j++){
            indegree[adj[i][j]]++;
        }
    }
    queue<int>q;
    for(int i=0;i<n;i++){
        if(indegree[i]==0){
            q.push(i);
        }
    }
    vector<int>result;
    while(!q.empty()){
        int node=q.front();
        q.pop();
        result.push_back(node);
        for(int i=0;i<adj[node].size();i++){
            indegree[adj[node][i]]--;
            if(indegree[adj[node][i]]==0){
                q.push(adj[node][i]);
            }
        }
        
    }
    if(result.size()!=n){
        cout<<"graph contains cycle"<<endl;
        return {};
    }
    return result;
}
int main()
{
    int n = 4;
    vector<vector<int> > edges
        = { { 0, 1 }, { 1, 2 }, { 3, 1 }, { 3, 2 } };
    vector<vector<int> > adj(n);
    for (auto i : edges) {
        adj[i[0]].push_back(i[1]);
    }
    cout << "Topological sorting of the graph: ";
    vector<int> result = topologicalSort(adj, n);
    for (auto i : result) {
        cout << i << " ";
    }
    return 0;
}