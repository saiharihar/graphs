#include<iostream>
#include<vector>
#include<queue>
#include<climits>
using namespace std;
void add_edge(vector<vector<pair<int,int>>>&graph,int u,int v,int w){
    graph[u].push_back({v,w});
    graph[v].push_back({u,w});
}

void dijkstra(vector<vector<pair<int,int>>>&graph,int src,int n){
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    vector<int>dist(n,INT_MAX);
    pq.push({0,src});
    dist[src]=0;
    while(!pq.empty()){
        int u=pq.top().second;
        pq.pop();
        for(auto x:graph[u]){
            int v=x.first;
            int wt=x.second;
            if(dist[v]>dist[u]+wt){
                dist[v]=dist[u]+wt;
                pq.push({dist[v],v});
            }
        }
    }
    cout<<"distances from source node to given node are"<<endl;
    for(int i=0;i<n;i++){
        cout<<i<<" "<<dist[i]<<endl;
    }
}

int main(){
    int n;
    cout<<"enter no of vertices"<<endl;
    cin>>n;
    vector<vector<pair<int,int>>>graph(n);
    int e;
    cout<<"enter no of edges"<<endl;
    cin>>e;
    for(int i=0;i<e;i++){
        int u,v,wt;
        cin>>u>>v>>wt;
        add_edge(graph,u,v,wt);
    }
    int src;
    cout<<"enter source node"<<endl;
    cin>>src;
    dijkstra(graph,src,n);
}