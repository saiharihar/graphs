#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>

using namespace std;

void dfs(vector<vector<int>>& adjList, vector<bool>& visited, int node) {
    visited[node] = true;
    cout << node <<" ";

    for (int neighbor : adjList[node]) {
        if (!visited[neighbor]) {
            dfs(adjList, visited, neighbor);
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<int>> adjList(n);
    vector<bool> visited(n, false);

    // Input edges
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u); // For undirected graph
    }

    // Sorting adjacency lists for easier observation of DFS traversal
    for (int i = 0; i < n; ++i) {
        sort(adjList[i].begin(), adjList[i].end());
    }

    // Perform DFS traversal from each unvisited node
    for (int i = 0; i < n; ++i) {
        if (!visited[i]) {
            dfs(adjList, visited, i);
        }
    }

    return 0;
}
