#include<iostream>
#include<vector>
using namespace std;
int find(int n,vector<int>&ds){
    if(n==-1){
        return n;
    }
    return find(ds[n],ds);
}

void union_(int fromP,int toP,vector<int>&ds){
    ds[fromP]=toP;
    return;
}
bool cycle(vector<pair<int,int>>&adj,vector<int>&ds){
    for(auto p:adj){
        int fromP=find(p.first,ds);
        int toP=find(p.second,ds);
        if(fromP==toP){
            return true;
        }
        union_(fromP,toP,ds);
    }
    return false;
}
int main(){
    int n,e;
    cin>>n>>e;
    vector<int>ds(n,-1);
    vector<pair<int,int>>adj(e);
    for(int i=0;i<e;i++){
        int u,v;
        cin>>u>>v;
        adj.push_back({u,v});
    }
    if(cycle(adj,ds)){
        cout<<"cycle exists"<<endl;
    }
    else{
        cout<<"no cyccle exists"<<endl;
    }
}